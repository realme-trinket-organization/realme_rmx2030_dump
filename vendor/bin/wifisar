#!/vendor/bin/sh

SAR_EXEC_FILE="/vendor/bin/vendor_cmd_tool"
SAR_CFG_FILE="/vendor/etc/wifi/sar-vendor-cmd.xml"


WIFI_SAR_DISABLE_CMD_BODY="--ENABLE 5 --NUM_SPECS 0 --END_CMD"

# Note element rule:
# 1. --NUM_SPECS should equal exactly item number;
# 2. Please not modify exist rules, just add new rule for specific country/reg,
#    for add new rules, you should be carefuly about below:
# 	1) Notice BAND\CHAIN\MOD info;
# 	2) Notice POW, the unit is 0.5dBm;
# 	3) Notice always check NUM_SPECS value, it MUST equal item numbers.
# 3. Rule 0 is an example, you should NEVER modify it;
# 4. sarIdx should match enum "SwitchWifiSar" index defined in OemProximitySensorManager.java.
WIFI_SAR_SETTING=(
## get detail information from 80-ya512-12_yd_wcn39xx_wlan_coexistence_software_user_guide.pdf
## sarIdx:0 -- 2.4G/5G both (example, should NEVER use/modify it)
"--ENABLE 6 --NUM_SPECS 4 \
--SAR_SPEC \
--NESTED_AUTO --BAND 0 --CHAIN 0 --POW 28 --END_ATTR \
--NESTED_AUTO --BAND 0 --CHAIN 1 --POW 28 --END_ATTR \
--NESTED_AUTO --BAND 1 --CHAIN 0 --POW 28 --END_ATTR \
--NESTED_AUTO --BAND 1 --CHAIN 1 --POW 28 --END_ATTR \
--END_ATTR --END_CMD"

###################### CE ######################
#
## sarIdx:1 -- For head sar, 2.4G+GSM
"--ENABLE 6 --NUM_SPECS 1 \
--SAR_SPEC \
--NESTED_AUTO --BAND 0 --POW 32 --END_ATTR \
--END_ATTR --END_CMD"

## sarIdx:2 -- For body sar, 2.4G+GSM
"--ENABLE 6 --NUM_SPECS 1 \
--SAR_SPEC \
--NESTED_AUTO --BAND 0 --POW 30 --END_ATTR \
--END_ATTR --END_CMD"

## sarIdx:3 -- For head sar, GSM+5G band1/2/3
"--ENABLE 6 --NUM_SPECS 1 \
--SAR_SPEC \
--NESTED_AUTO --BAND 1 --POW 36 --END_ATTR \
--END_ATTR --END_CMD"

## sarIdx:4 -- For body sar, GSM+5G band1/2/3
"--ENABLE 6 --NUM_SPECS 1 \
--SAR_SPEC \
--NESTED_AUTO --BAND 1 --POW 34 --END_ATTR \
--END_ATTR --END_CMD"
)

# temp static value, should get from sysfs based on STA/SAP on/off status
# for android O, interface of SAP is softap0
get_wifi_iface() {
	echo "wlan0"
}

build_cmd_header() {
	iface="$(get_wifi_iface)"
	echo "-f $SAR_CFG_FILE -i $iface --START_CMD --SAR_SET"
}

build_cmd_body() {
	sarIdx="$1"
	prjVer="$2"

	# disable sar cmd body
	[ "0" -eq "$sarIdx" ] && echo "$WIFI_SAR_DISABLE_CMD_BODY" && return

	case "$prjVer" in
		"19323" | "19327" | "19329" )
			arraySize=${#WIFI_SAR_SETTING[@]}
			if [ "$sarIdx" -lt "$arraySize" ]; then
				echo "${WIFI_SAR_SETTING[$sarIdx]}"
				return
			fi
			;;
		*)
			echo "Project $prjVer not support now!!" > /dev/null
			;;
	esac

	# Normally we will never goto here, if process goes wrong, always disable sar.
	echo "$WIFI_SAR_DISABLE_CMD_BODY"
}

build_cmd() {
	cHdr="$(build_cmd_header)"
	cBody="$(build_cmd_body $1 $2)"

	echo "$cHdr $cBody"
}

apply_sar() {
	cmd="$(build_cmd $1 $2)"
	echo "cmd=$cmd"

	$SAR_EXEC_FILE $cmd
}

get_reg_from_cc() {
	[ -z "$1" ] && echo "cn" && return

	if [ "$1" == "FR" -o "$1" == "ES" -o "$1" == "IT" -o "$1" == "PL" -o "$1" == "NL" -o "$1" == "GB" -o "$1" == "TR" ]; then
		echo "ce"
	elif [ "$1" == "SA" -o "$1" == "AE" -o "$1" == "TW" -o "$1" == "SG" -o "$1" == "RU" -o "$1" == "KZ" -o "$1" == "ID" \
	-o "$1" == "VN" -o "$1" == "KH" -o "$1" == "PH" -o "$1" == "MY" -o "$1" == "TH" -o "$1" == "MM" -o "$1" == "PK" \
	-o "$1" == "LK" -o "$1" == "BD" -o "$1" == "NP" ]; then
		echo "ap"
	else
		echo "$1"
	fi
}

get_sar_idx() {
	idx="0"

	[ "$#" -ne "8" ] && echo "$idx" && return

	cc="$1"
	wifi2g="$2"
	wifi5g="$3"
	modem="$4"
	screen_on="$5"
	test_card="$6"
	sensor_near="$7"
	project="$8"

	if [ "$project" == "19323" -o "$project" == "19327" -o "$project" == "19329" ]; then
		reg=$(get_reg_from_cc "$cc")

		[ -z "$reg" ] && echo "$idx" && return

		# for CE
		if [ "ce" == "$reg" ]; then
			if [ "$wifi2g" == "1" -a "$wifi5g" == "0" ]; then
				if [ "$modem" == "2" -a "$screen_on" == "0" -a "$sensor_near" == "1" ]; then
					idx="1"
				elif [ "$modem" -ne "0" -a "$sensor_near" == "0" ]; then
					idx="2"
				fi
			elif [ "$wifi2g" == "0" ] && ([ "$wifi5g" == "1" -o "$wifi5g" == "2" -o "$wifi5g" == "3" ]); then
				if [ "$modem" == "2" -a "$screen_on" == "0" -a "$sensor_near" == "1" ]; then
					idx="3"
				elif [ "$modem" -ne "0" -a "$sensor_near" == "0" ]; then
					idx="4"
				fi
			fi
		fi
	fi

	echo "$idx"
}

project_version=$(cat "/proc/oppoVersion/prjVersion")
[ -z "$project_version" ] && return

# Note:
# 1. countryCode:wifi 2.4G enable(0/1):wifi 5G band(0-4):modem work type(0-3, disable/idle/4G/5G):screen on/off:isTestCard:SensorState.
sar_cmd=$(getprop "oppo.wifi.sar.idx" "")

cmd_array=(${sar_cmd//:/ })
array_len=${#cmd_array[@]}
[ "$array_len" -ne "7" ] && echo "Invalid sar cmd!" && return

country_code=${cmd_array[0]}
wifi2g=${cmd_array[1]}
wifi5g=${cmd_array[2]}
modem=${cmd_array[3]}
screen=${cmd_array[4]}
test_card=${cmd_array[5]}
sensor=${cmd_array[6]}

sarIdx=$(get_sar_idx "$country_code" "$wifi2g" "$wifi5g" "$modem" "$screen" "$test_card" "$sensor" "$project_version")

apply_sar "$sarIdx" "$project_version"
